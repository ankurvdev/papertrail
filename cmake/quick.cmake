# Make OneCore Binaries
cmake_minimum_required(VERSION 3.10)
set(CMAKE_CXX_STANDARD 20)
#set(CMAKE_CXX_CLANG_TIDY "clang-tidy;-checks=*")

include(${CMAKE_CURRENT_LIST_DIR}/Catch.cmake)

if (BUILD_ARCH AND CMAKE_GENERATOR MATCHES "Visual")
    set(CMAKE_GENERATOR_PLATFORM ${BUILD_ARCH} CACHE STRING "" FORCE)
    if (WIN32 AND CMAKE_GENERATOR MATCHES "Visual" AND BUILD_ARCH AND BUILD_ARCH MATCHES "x86")
        set(CMAKE_GENERATOR_PLATFORM Win32 CACHE STRING "" FORCE)
    endif()
endif()

if (WIN32 AND CMAKE_GENERATOR MATCHES "Visual" AND BUILD_CONFIG)
    set(CMAKE_CONFIGURATION_TYPES ${BUILD_CONFIG} CACHE STRING "" FORCE)
endif()
if (CMAKE_GENERATOR_PLATFORM)
    set(CMAKE_VS_PLATFORM_NAME_DEFAULT ${CMAKE_GENERATOR_PLATFORM} CACHE STRING "" FORCE)
endif()
set(LexYacc_DIR "${CMAKE_CURRENT_LIST_DIR}/LexYacc")
set(UWPPROPSFILE "${CMAKE_CURRENT_LIST_DIR}/UWP.props")
set(UWPTARGETSFILE "${CMAKE_CURRENT_LIST_DIR}/UWP.targets")

set(EmbedResource_DIR ${CMAKE_CURRENT_LIST_DIR}/EmbedResource)
set(ModelGenerator_DIR ${CMAKE_CURRENT_LIST_DIR}/ModelGenerator)
set(embedresource_CODEPATH ${CMAKE_CURRENT_LIST_DIR}/../codegen/embedresource)
set(modelgenerator_CODEPATH ${CMAKE_CURRENT_LIST_DIR}/../codegen/modelgenerator)

set(ImageMagick_DIR S:/bin/imagemagick)
set(External_Root ${CMAKE_CURRENT_LIST_DIR}/../external)
set(CommonHeaders_DIR ${CMAKE_CURRENT_LIST_DIR}/Common)

set(DEVEL_BINPATH   $ENV{DEVEL_BINPATH})
set(DEVEL_BUILDPATH $ENV{DEVEL_BUILDPATH})

function(debug_env)
    get_cmake_property(_variableNames VARIABLES)
    list (SORT _variableNames)
    foreach (_variableName ${_variableNames})
        message(STATUS "::${_variableName}::=::${${_variableName}}::")
    endforeach()
endfunction()

function(DetectValueForParam VAR_NAME)
    if(DEFINED ${VAR_NAME})
        return()
    endif()

    if(DEFINED ENV{${VAR_NAME}})
        set(${VAR_NAME} $ENV{${VAR_NAME}} CACHE INTERNAL "")
        return()
    endif()
    if(NOT EXISTS ${CMAKE_CURRENT_LIST_DIR}/../.config)
        message(FATAL_ERROR "${CMAKE_CURRENT_LIST_DIR}/../.config not detected. Run devel.cmd once")
    endif()

    file(READ ${CMAKE_CURRENT_LIST_DIR}/../.config DEVEL_CONFIG)
    string(REGEX REPLACE "\n" ";" DEVEL_CONFIG "${DEVEL_CONFIG}")
    foreach(kvp ${DEVEL_CONFIG})
        string(REPLACE "=" ";" kvplist ${kvp})
        list(GET kvplist 0 kvpkey)
        list(GET kvplist 1 kvpvalue)
        if ("${kvpkey}" STREQUAL "${VAR_NAME}")
            set(${VAR_NAME} ${kvpvalue} GLOBAL_SCOPE)
            set(${VAR_NAME} ${kvpvalue} CACHE INTERNAL "")
        endif()
    endforeach()
    if(NOT DEFINED ${VAR_NAME})
        message(FATAL_ERROR "${CMAKE_CURRENT_LIST_DIR}/../.config ${VAR_NAME} not detected. Run devel.cmd once")
    endif()
endfunction()

function(DetectPath name defaultvalue)
    if (DEFINED ${name})
        return()
    endif()
    if (DEFINED ENV{${name}})
        set(${name} $ENV{${name}} CACHE INTERNAL "")
    else()
        set(${name} ${defaultvalue} CACHE INTERNAL "")
    endif()
endfunction()

DetectValueForParam(DEVEL_BINPATH)
DetectValueForParam(DEVEL_BUILDPATH)

file(TO_CMAKE_PATH ${DEVEL_BINPATH} DEVEL_BINPATH)
file(TO_CMAKE_PATH ${DEVEL_BUILDPATH} DEVEL_BUILDPATH)

function(myexec workdir)
    execute_process(
        COMMAND ${ARGN}
        WORKING_DIRECTORY ${workdir}
        RESULT_VARIABLE result
        ERROR_VARIABLE error
        OUTPUT_VARIABLE output)
    if(NOT "${result}" STREQUAL "0")
        message(FATAL_ERROR 
        "Error Executing Command : ${ARGN}\n"
        "WorkDir: ${workdir}\n" 
        "Result: ${result} \n"
        "Error: ${error} \n"
        "Output: ${output}")
    endif()
endfunction()

include(${CMAKE_CURRENT_LIST_DIR}/vcpkg.cmake)

function(use_commonheader target)
    target_compile_definitions(${target} PRIVATE NOMINMAX=1)
    target_include_directories(${target} PRIVATE ${CommonHeaders_DIR})
    file(GLOB headerfiles "${CommonHeaders_DIR}/*.h")
    target_sources(${target} PRIVATE ${headerfiles})
endfunction()

function(embed_resources target name)
    find_or_build_my_tool("embedresource")
    set(outdir ${PROJECT_BINARY_DIR}/${target}_embedresource)
    file(MAKE_DIRECTORY ${outdir})
    set(out_f ${outdir}/${name}.cpp)

    add_custom_command(OUTPUT ${out_f}
        COMMAND ${embedresource_BINARY} ${out_f} ${ARGN}
        DEPENDS ${embedresource_BINARY} ${ARGN}
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        COMMENT "Building binary file for embedding ${out_f}" VERBATIM)

    target_sources(${target} PRIVATE ${out_f})
    #source_group(TREE . PREFIX Resources FILES ${ARGN})
    #source_group(TREE . PREFIX Generated FILES ${out_f})
    target_include_directories(${target} PRIVATE ${embedresource_CODEPATH})
endfunction()

function(use_onecore target)
    if(NOT WIN32)
        target_link_libraries(${target} PRIVATE stdc++fs pthread)
    else()
        #   target_link_options(${target} PRIVATE "/NODEFAULTLIB")
        target_link_libraries(${target} PRIVATE WindowsApp.lib rpcrt4.lib onecoreuap.lib kernel32.lib)
        set_target_properties(${target} PROPERTIES VS_GLOBAL_MinimalCoreWin "true")
    endif()
endfunction()

function(gettargetname targetnamevar dir type)
    if(${type} STREQUAL "buildtool")
        get_filename_component(name ${dir} NAME_WLE)
    else()
        string(REPLACE "/" "_" name ${dir})
        set(name ${name}.${type})
    endif()
    set(${targetnamevar} ${name} PARENT_SCOPE)
endfunction()

function(register)
    list(GET ARGN 0 dir)
    list(GET ARGN 1 type)
    gettargetname(targetname ${dir} ${type})
    set(DEVEL_TARGETS "" CACHE STRING "List of all the known targets")
    if ((targetname IN_LIST DEVEL_TARGETS) AND (DEVEL_TARGET_INFO_${targetname}) AND ("${DEVEL_TARGET_INFO_${targetname}}" STREQUAL "${ARGN}"))
        return()
    endif()
    set(newTargets ${DEVEL_TARGETS})
    if(NOT targetname IN_LIST newTargets)
        list(APPEND newTargets ${targetname})
    endif()

    set(DEVEL_TARGET_INFO_${targetname} ${ARGN} CACHE INTERNAL "Info about target" FORCE)
    set(DEVEL_TARGETS ${newTargets} CACHE STRING "List of all the known targets" FORCE)
endfunction()

function(load_targets)
    if (BUILDING_TOOL)
        _load_directory(${BUILDING_TOOL})
    else()
        foreach (tgt ${DEVEL_TARGETS})
            _load_directory(${tgt})
        endforeach()
    endif()
endfunction()

function(_load_directory targetname)
    if (NOT DEVEL_TARGET_INFO_${targetname})
        message(FATAL_ERROR "NO target info exists for ${targetname}")
    endif()

    set(info ${DEVEL_TARGET_INFO_${targetname}})
    list(POP_FRONT info dir)
    list(POP_FRONT info LOAD_DIRECTORY_TARGETTYPE)

    gettargetname(LOAD_DIRECTORY_TARGET ${dir} ${LOAD_DIRECTORY_TARGETTYPE})
    if (TARGET ${LOAD_DIRECTORY_TARGET})
        return()
    endif()

    set(options "")
    set(oneValueArgs "")
    set(multiValueArgs FILES EXCLUDE USE RESOURCES INCLUDE LINK)

    cmake_parse_arguments(LOAD_DIRECTORY "${options}" "${oneValueArgs}" "${multiValueArgs}" ${info})
    if ("cppwinrt" IN_LIST LOAD_DIRECTORY_USE AND (NOT WIN32))
        message(STATUS "Ignoring Windows Target on linux ${targetname}") 
        return()
    endif()
    foreach (lnk ${LOAD_DIRECTORY_LINK})
        _load_directory(${lnk})
    endforeach()
    set(LOAD_DIRECTORY_DIR ${CMAKE_CURRENT_LIST_DIR}/../${dir}) 

    if(NOT LOAD_DIRECTORY_FILES)
        file(GLOB LOAD_DIRECTORY_FILES ${LOAD_DIRECTORY_DIR}/*.*)
    endif()

    if(LOAD_DIRECTORY_EXCLUDE)
        list(FILTER LOAD_DIRECTORY_FILES EXCLUDE REGEX ${LOAD_DIRECTORY_EXCLUDE})
    endif()

    set(EXE_NAME ${LOAD_DIRECTORY_TARGET})
    set(VERSION_MAJOR "1")
    string(TIMESTAMP VERSION_RELEASE "%y%m")
    string(TIMESTAMP VERSION_ITERATION "1%d")
    set(VERSION "${VERSION_MAJOR}.${VERSION_RELEASE}.${VERSION_ITERATION}.0")

    set(APP_MANIFEST_NAME package.appxmanifest)
    set(SHORT_NAME ${LOAD_DIRECTORY_TARGET})
    set(PACKAGE_GUID "52d2050b-7d66-4a4f-af2b-c81dd08b8271")
    set(PUBLISHER_ID "CN=ankurv")
    set(PUBLISHER_DISPLAY_NAME "Ankur Verma")

    set(cppfiles        ${LOAD_DIRECTORY_FILES})
    set(headerfiles     ${LOAD_DIRECTORY_FILES})
    set(idlfiles        ${LOAD_DIRECTORY_FILES})
    set(midlfiles       ${LOAD_DIRECTORY_FILES})
    set(packagemanifest ${LOAD_DIRECTORY_FILES})
    set(appxmanifest    ${LOAD_DIRECTORY_FILES})
    set(cert            ${LOAD_DIRECTORY_FILES})
    set(assetsvg        ${LOAD_DIRECTORY_FILES})
    set(assetreq        ${LOAD_DIRECTORY_FILES})
    set(lyfiles         ${LOAD_DIRECTORY_FILES})

    list(FILTER cppfiles        INCLUDE REGEX ".*\.cpp$")
    list(FILTER headerfiles     INCLUDE REGEX ".*\.h$")
    list(FILTER idlfiles        INCLUDE REGEX ".*\.pidl$")
    list(FILTER midlfiles       INCLUDE REGEX ".*\.idl$")
    list(FILTER packagemanifest INCLUDE REGEX ".*package\.appxmanifest$")
    list(FILTER appxmanifest    INCLUDE REGEX ".*AppxManifest\.xml$")
    list(FILTER cert            INCLUDE REGEX ".*\.pfx$")
    list(FILTER assetsvg        INCLUDE REGEX ".*\.asset\.svg$")
    list(FILTER assetreq        INCLUDE REGEX ".*\.asset\.req$")
    list(FILTER lyfiles         INCLUDE REGEX ".*\.ly$")

    set (sourcefiles ${cppfiles} ${headerfiles} ${midlfiles})
    if(${LOAD_DIRECTORY_TARGETTYPE} STREQUAL exe)
        add_executable(${LOAD_DIRECTORY_TARGET} ${sourcefiles})
        use_onecore(${LOAD_DIRECTORY_TARGET})
        install(TARGETS ${LOAD_DIRECTORY_TARGET} RUNTIME DESTINATION bin COMPONENT binaries)
    elseif(${LOAD_DIRECTORY_TARGETTYPE} STREQUAL lib)
        message(STATUS "Lib Target : ${targetname}")
        add_library(${LOAD_DIRECTORY_TARGET} STATIC ${sourcefiles})
        use_onecore(${LOAD_DIRECTORY_TARGET})
    elseif(${LOAD_DIRECTORY_TARGETTYPE} STREQUAL win32exe)
        add_executable(${LOAD_DIRECTORY_TARGET} WIN32 ${sourcefiles})
        install(TARGETS ${LOAD_DIRECTORY_TARGET} RUNTIME DESTINATION bin COMPONENT binaries)
    elseif(${LOAD_DIRECTORY_TARGETTYPE} STREQUAL uwp)
        if (WIN32)
            add_executable(${LOAD_DIRECTORY_TARGET} WIN32 ${sourcefiles})
            use_onecore(${LOAD_DIRECTORY_TARGET})
            install(TARGETS ${LOAD_DIRECTORY_TARGET} RUNTIME DESTINATION ${LOAD_DIRECTORY_TARGET} COMPONENT ${LOAD_DIRECTORY_TARGET})
        else()
            message(STATUS "Ignoring UWP target : ${targetname}")
            return()
        endif()
    elseif(${LOAD_DIRECTORY_TARGETTYPE} STREQUAL test)
        add_executable(${LOAD_DIRECTORY_TARGET} ${sourcefiles})
        use_onecore(${LOAD_DIRECTORY_TARGET})
        use_catch2(${LOAD_DIRECTORY_TARGET})
        install(TARGETS ${LOAD_DIRECTORY_TARGET} RUNTIME DESTINATION test COMPONENT tests)
    elseif(${LOAD_DIRECTORY_TARGETTYPE} STREQUAL buildtool)
        add_executable(${LOAD_DIRECTORY_TARGET} ${sourcefiles})
        if (NOT BUILDING_TOOL)
            #add_custom_command(TARGET ${LOAD_DIRECTORY_TARGET} POST_BUILD WORKING_DIRECTORY ${${LOAD_DIRECTORY_TARGET}_builddir} COMMAND ${CMAKE_COMMAND} --build . -j --target install)
            use_commonheader(${LOAD_DIRECTORY_TARGET})
            #add_custom_command(TARGET ${LOAD_DIRECTORY_TARGET} POST_BUILD WORKING_DIRECTORY ${${LOAD_DIRECTORY_TARGET}_builddir} COMMAND ${CMAKE_COMMAND} --build . -j --target install)
        endif()
        use_onecore(${LOAD_DIRECTORY_TARGET})
        install(TARGETS ${LOAD_DIRECTORY_TARGET} RUNTIME DESTINATION tools COMPONENT tools)
    endif()

    if (MSVC)
        target_compile_options(${LOAD_DIRECTORY_TARGET} PRIVATE -permissive-)
        target_compile_options(${LOAD_DIRECTORY_TARGET} PRIVATE -W4)
        target_compile_options(${LOAD_DIRECTORY_TARGET} PRIVATE -WX)
        target_compile_options(${LOAD_DIRECTORY_TARGET} PRIVATE -EHsc)
    endif()
    target_compile_definitions(${LOAD_DIRECTORY_TARGET} PRIVATE __STDC_WANT_LIB_EXT1__=1) # For Posix localtime_s
    foreach(use ${LOAD_DIRECTORY_USE})
        if(${use} STREQUAL cppwinrt)
            target_compile_options(${LOAD_DIRECTORY_TARGET} PRIVATE "-await")
            target_compile_definitions(${LOAD_DIRECTORY_TARGET} PRIVATE UNICODE)
            #use_cppwinrt(${LOAD_DIRECTORY_TARGET})
        elseif(${use} STREQUAL libssh2)
            use_libssh2(${LOAD_DIRECTORY_TARGET})
        elseif(${use} STREQUAL rapidjson)
            use_rapidjson(${LOAD_DIRECTORY_TARGET})
        elseif(${use} STREQUAL microhttpd)
            use_cpphttplib(${LOAD_DIRECTORY_TARGET})
        elseif(${use} STREQUAL tinyxml2)
            use_tinyxml2(${LOAD_DIRECTORY_TARGET})
        elseif(${use} STREQUAL boost_beast)
            use_boost_beast(${LOAD_DIRECTORY_TARGET})
        elseif(${use} STREQUAL cpr)
            use_cpr(${LOAD_DIRECTORY_TARGET})
        elseif(${use} STREQUAL curl)
            use_curl(${LOAD_DIRECTORY_TARGET})
        elseif(${use} STREQUAL cpphttplib)
            use_cpphttplib(${LOAD_DIRECTORY_TARGET})
        elseif(${use} STREQUAL dtl)
            use_dtl(${LOAD_DIRECTORY_TARGET})
        endif()

    endforeach()

    foreach(inc ${LOAD_DIRECTORY_INCLUDE})
        target_include_directories(${LOAD_DIRECTORY_TARGET} PUBLIC ${LOAD_DIRECTORY_DIR}/${inc})
    endforeach()
    
    foreach(lnk ${LOAD_DIRECTORY_LINK})
        if (TARGET ${lnk})
            target_link_libraries(${LOAD_DIRECTORY_TARGET} PUBLIC ${lnk})
        endif()
    endforeach()
    
    list(LENGTH headerfiles LEN)
    if(LEN GREATER 0)
        target_include_directories(${LOAD_DIRECTORY_TARGET} PRIVATE ${LOAD_DIRECTORY_DIR})
    endif()

    list(LENGTH idlfiles LEN)
    if(LEN GREATER 0)
        find_package(ModelGenerator)
        add_idls(${LOAD_DIRECTORY_TARGET} ${idlfiles})
    endif()

    foreach(ly ${lyfiles})
        find_package(LexYacc REQUIRED)
        target_add_lexyacc(${LOAD_DIRECTORY_TARGET} ${ly})
    endforeach()

    list(LENGTH LOAD_DIRECTORY_RESOURCES LEN)
    if(LEN GREATER 0)
        find_package(EmbedResource REQUIRED)
        foreach(r ${LOAD_DIRECTORY_RESOURCES})
            file(GLOB resfiles ${LOAD_DIRECTORY_DIR}/${r}/*.*)
            if ("${resfiles}" STREQUAL "")
                message(FATAL_ERROR "Cannot find resource for ${LOAD_DIRECTORY_DIR}/${r}*/*.*")
            endif()
            embed_resources(${LOAD_DIRECTORY_TARGET} ${r} ${resfiles})
        endforeach()
    endif()

    list(LENGTH packagemanifest LEN)
    if(LEN GREATER 0)
        configure_file(${packagemanifest} ${LOAD_DIRECTORY_DIR}/package.appxmanifest)
        target_sources(${LOAD_DIRECTORY_TARGET} PRIVATE ${LOAD_DIRECTORY_DIR}/package.appxmanifest)
        target_sources(${LOAD_DIRECTORY_TARGET} PRIVATE ${cert})
    endif()

    if (NOT "${appxmanifest}" STREQUAL "")
        add_custom_command(TARGET ${LOAD_DIRECTORY_TARGET} POST_BUILD
            COMMAND ${CMAKE_COMMAND} -E copy ${appxmanifest} $<TARGET_FILE_DIR:${LOAD_DIRECTORY_TARGET}>)
        add_custom_command(TARGET ${LOAD_DIRECTORY_TARGET} POST_BUILD
            COMMAND ${CMAKE_COMMAND} -E copy ${LOAD_DIRECTORY_DIR}/resources.pri $<TARGET_FILE_DIR:${LOAD_DIRECTORY_TARGET}>)
        install(FILES ${appxmanifest} DESTINATION ${LOAD_DIRECTORY_TARGET} COMPONENT ${LOAD_DIRECTORY_TARGET})
        install(FILES ${LOAD_DIRECTORY_DIR}/resources.pri DESTINATION ${LOAD_DIRECTORY_TARGET} COMPONENT ${LOAD_DIRECTORY_TARGET})
        install(FILES ${cert} DESTINATION . COMPONENT ${LOAD_DIRECTORY_TARGET})
    endif()

    if (NOT "${assetreq}${assetsvg}" STREQUAL "")
        generate_assets(${LOAD_DIRECTORY_TARGET} ${assetsvg} Assets ${assetreq})
    endif()

    if (MSVC AND "${LOAD_DIRECTORY_DIR}/pch.h" IN_LIST headerfiles AND "${LOAD_DIRECTORY_DIR}/pch.cpp" IN_LIST cppfiles)
        set_target_properties(${LOAD_DIRECTORY_TARGET} PROPERTIES COMPILE_FLAGS "/Yupch.h")
        set_source_files_properties(${LOAD_DIRECTORY_DIR}/pch.cpp PROPERTIES COMPILE_FLAGS "/Ycpch.h")
    endif()

    use_commonheader(${LOAD_DIRECTORY_TARGET})
endfunction()

function(find_or_build_my_tool name)
    set(binvarname ${name}_BINARY)
    set(tooldir "${DEVEL_BUILDPATH}/tools")
    set(toolbuilddir "${tooldir}/build/${name}")
    set(${name}_builddir ${toolbuilddir} CACHE PATH INTERNAL)

    find_program(${binvarname} ${name} HINTS ${tooldir})
    if (${binvarname}-NOTFOUND OR NOT EXISTS ${${binvarname}})
        file(LOCK ${toolbuilddir} DIRECTORY GUARD FUNCTION)
        file(MAKE_DIRECTORY ${toolbuilddir})

        message(STATUS
            "Building: " ${name}
            " InstallPrefix: " ${DEVEL_BUILDPATH}
            " CodePath: " ${${name}_CODEPATH}
            " Generator: " ${CMAKE_GENERATOR}
            " WorkingDir: " ${toolbuilddir})

        set(CMD ${CMAKE_COMMAND})
        list(APPEND CMD -DBUILD_ARCH=x86 -DBUILD_CONFIG=Debug)
        list(APPEND CMD -DDEVEL_BUILDPATH=${DEVEL_BUILDPATH} -DDEVEL_BINPATH=${DEVEL_BINPATH})
        list(APPEND CMD -DBUILDING_TOOL:STR=${name} -DCMAKE_INSTALL_PREFIX=${DEVEL_BUILDPATH})
        list(APPEND CMD ${CMAKE_CURRENT_LIST_DIR})
        myexec(${toolbuilddir} ${CMD})
        myexec(${toolbuilddir} ${CMAKE_COMMAND} --build . -j --target install)
        find_program(${binvarname} ${name} HINTS ${tooldir})
    endif()
    if (${binvarname}-NOTFOUND)
        message( FATAL_ERROR "${name} needed to process dependencies. Cannot find or build" )
    endif()
endfunction()

function(generate_assets target source dest assetreqfile)
    #find_package(ImageMagick REQUIRED)
    file(READ ${assetreqfile} contents)
    string(REGEX REPLACE ";" "\\\\;" contents "${contents}")
    string(REGEX REPLACE "\n" ";" contents "${contents}")
    find_program(convert_BINARY REQUIRED "convert" HINTS ${DEVEL_BINPATH}/imagemagick)
    if(convert_BINARY-NOTFOUND)
        message(FATAL_ERROR "Cannot find ImageMagick-convert. Please install imagemagick")
    endif()
    foreach(req ${contents})
        string(REGEX REPLACE "\t+" ";" req "${req}")
        list(GET req 0 name)
        list(GET req 1 imagesize)
        list(GET req 2 scalesize)
        if (NOT scalesize)
            set(scalesize ${imagesize})
        endif()
        set(filename ${CMAKE_CURRENT_BINARY_DIR}/${dest}/${name})
        if(NOT EXISTS ${filename})
            file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${dest})
            myexec(${CMAKE_CURRENT_BINARY_DIR}/${dest} ${convert_BINARY} -density ${scalesize} -extent ${imagesize} -gravity center -background none ${source} ${filename})
        endif()
        list(APPEND imagefiles ${filename})
    endforeach()
    add_custom_command(TARGET ${target} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_BINARY_DIR}/${dest} $<TARGET_FILE_DIR:${target}>/${dest})
    install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${dest} DESTINATION ${LOAD_DIRECTORY_TARGET} COMPONENT ${LOAD_DIRECTORY_TARGET})

    target_sources(${target} PRIVATE ${imagefiles})
    set_property(SOURCE ${assetfiles} PROPERTY VS_DEPLOYMENT_CONTENT 1)
    set_property(SOURCE ${assetfiles} PROPERTY VS_DEPLOYMENT_LOCATION ${dest})
endfunction()
