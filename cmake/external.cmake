
function(use_cpphttplib target)
	add_external(cpp-httplib HEADERONLY)
	target_compile_definitions(${target} PRIVATE USE_CPPHTTPLIB=1)
	target_include_directories(${target} PRIVATE ${CPPHTTPLIB_INCLUDE_DIRS})
endfunction()

function(use_catch2 target)
	add_external(Catch2 HEADERONLY BUILDARGS -DCATCH_BUILD_TESTING:BOOL=OFF -DCATCH_BUILD_EXAMPLES:BOOL=OFF)
	target_include_directories(${target} PRIVATE ${CATCH2_INCLUDE_DIRS})
	target_include_directories(${target} PRIVATE ${CATCH2_INCLUDE_DIRS})
	target_compile_definitions(${target} PRIVATE UNICODE=1)
	catch_discover_tests(${target})
endfunction()

function(use_tinyxml2 target)
	add_external(tinyxml2)
	target_include_directories(${target} PRIVATE ${TINYXML2_INCLUDE_DIRS})
	arget_sources(${target} PRIVATE ${TINYXML2_INCLUDE_DIRS}/tinyxml2.cpp)
endfunction()

function(use_rapidjson target)
	add_external(rapidjson HEADERONLY BUILDARGS -DRAPIDJSON_BUILD_EXAMPLES:BOOL=OFF -DRAPIDJSON_BUILD_TESTS:BOOL=OFF -DRAPIDJSON_BUILD_DOC:BOOL=OFF)
	target_compile_definitions(${target} PRIVATE USE_RAPIDJSON=1)
	target_include_directories(${target} PRIVATE ${RAPIDJSON_INCLUDE_DIRS})
endfunction()

function(use_libssh2 target)
	add_external(libressl-release CMAKE "../cmake/libressl-release" BUILDARGS -DLIBRESSL_TESTS:BOOL=OFF -DLIBRESSL_APPS:BOOL=OFF)
	add_external(libssh2 CMAKE "../cmake/libssh2" BUILDARGS -DOPENSSL_ROOT_DIR=${libressl-release_INSTALL_DIR} -DBUILD_EXAMPLES:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DBUILD_SHARED_LIBS:BOOL=OFF)
	find_package(Libssh2 REQUIRED HINTS ${libssh2_INSTALL_DIR})
	target_include_directories(${target} PRIVATE ${libssh2_INSTALL_DIR}/include)
	target_link_libraries(${target} PRIVATE Libssh2::libssh2)
endfunction()

function(add_external _project)
	set(options HEADERONLY)
	set(singleValueArgs CMAKE)
	set(multiValueArgs BUILDARGS)
	cmake_parse_arguments("" "${options}" "${singleValueArgs}" "${multiValueArgs}" ${ARGN})
	include(ExternalProject)
	string(REGEX REPLACE "/" "_" targetname ${_project})
	if (${targetname}-FOUND)
		return()
	endif()
	set(projectpath ${External_Root}/${_project})

	if("${_CMAKE}" STREQUAL "")
		set(cmakelistdir ${projectpath})
	else()
		set(cmakelistdir ${projectpath}/${_CMAKE})
	endif()

	set (projectargs ${_BUILDARGS})

	string(APPEND cmakeargs ${defaultargs})
	string(APPEND cmakeargs ${projectargs}) # no

	string(MD5 projecthash "${_project} ${ARGN}")
	string(SUBSTRING ${projecthash} 0 8 projecthash)

	set(installdir ${PROJECT_BINARY_DIR}/external/${targetname}-${projecthash})
	set(builddir   ${installdir}/build)
	set(tmpdir     ${builddir}/tmp)

	set(${targetname}_INSTALL_DIR ${installdir} CACHE INTERNAL "")

	if (NOT WIN32 AND "${targetname}" STREQUAL "libssh2")
		set(lib ${installdir}/lib64/${targetname}${CMAKE_STATIC_LIBRARY_SUFFIX})
	endif()

	myexec(${projectpath} git submodule update --init .)

	if (TARGET ${targetname} OR ${_HEADERONLY})
		return()
	endif() 
	set(cmakeextraargs "")	
	set(cmakebuildextraargs "")
	if (CMAKE_SYSTEM_NAME AND CMAKE_SYSTEM_VERSION)
		list (APPEND cmakeextraargs -DCMAKE_SYSTEM_NAME:STR=${CMAKE_SYSTEM_NAME})
		list (APPEND cmakeextraargs -DCMAKE_SYSTEM_VERSION:STR=${CMAKE_SYSTEM_VERSION})
	endif()
	if (CMAKE_CONFIGURATION_TYPES)
		#list (APPEND cmakebuildextraargs --config ${CMAKE_CONFIGURATION_TYPES})
		list (APPEND cmakeextraargs -DCMAKE_CONFIGURATION_TYPES:STR=${CMAKE_CONFIGURATION_TYPES})
	endif()
	if (CMAKE_GENERATOR_PLATFORM)
		list (APPEND cmakeextraargs -DCMAKE_GENERATOR_PLATFORM:STR=${CMAKE_GENERATOR_PLATFORM})
	endif()
	if (EXISTS ${cmakelistdir}/CMakeLists.txt)
		message(STATUS
			"Building: " ${targetname}
			" InstallPrefix: " ${installdir}
			" CodePath: " ${cmakelistdir}
			" Generator: " ${CMAKE_GENERATOR}
			" WorkingDir: " ${builddir})
		file(MAKE_DIRECTORY ${builddir})
		myexec(${builddir} ${CMAKE_COMMAND} -G ${CMAKE_GENERATOR} ${cmakeextraargs} -DCMAKE_INSTALL_PREFIX=${installdir} ${defaultargs} ${projectargs} ${cmakelistdir})
		myexec(${builddir} ${CMAKE_COMMAND} --build . -j --target install ${cmakebuildextraargs})
		find_library(${targetname} ${targetname} NAMES ${targetname} lib${targetname} ${targetname}-d lib${targetname}-d HINTS ${installdir} ${installdir}/lib ${installdir}/lib64)
		if (${targetname}-NOTFOUND)
			unset(${targetname} CACHE)
			unset(${targetname}-NOTFOUND CACHE)
			find_package(${targetname} HINTS ${installdir})
		endif()
		if (${targetname}-NOTFOUND) 
			message(FATAL_ERROR "Cannot locate ${targetname}")
		endif()
	else()
		message(FATAL_ERROR "Dont know how to build" ${targetname})
	endif()
	set(${targetname}-FOUND ON CACHE BOOL "")
endfunction()
